# upstream fastapi_app {
#     server fastapi_app:8000;
# }
#
# upstream db_app {
#     server db_app:5432;
# }
#
# upstream redis_auth {
#     server redis_auth:6379;
# }
#
# server {
#     listen 80;
#     server_name menoitami.ru;
#
#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }
#
#     location / {
#         return 301 https://$host$request_uri;
#     }
# }
#
# server {
#     listen 443 ssl;
#     server_name menoitami.ru;
#
#     ssl_certificate /etc/letsencrypt/live/menoitami.ru/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/menoitami.ru/privkey.pem;
#
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#
#     location /.well-known/assetlinks.json {
#         root /usr/share/nginx/html;
#     }
#
#     location /pages/ {
#         root /usr/share/nginx/html;
#         try_files $uri $uri/ =404;
#     }
#
#     location /api {
#         proxy_pass http://fastapi_app;
#         proxy_set_header Host $host;
#         proxy_pass_request_headers on;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }
#
#     location /db {
#         proxy_pass http://db_app;
#     }
#
#     location /redis {
#         proxy_pass http://redis_auth;
#     }
#
#     location /static/ {
#         root /usr/share/nginx/html;
#     }
# }
#
upstream backend {
    server auth_service:8000;
}

server {
    listen 80;
    server_name localhost;

    access_log /var/log/nginx/minio_access.log;

    location /avatars/jwt/ {
        access_by_lua_block {
            local jwt = require("resty.jwt")
            local cjson = require("cjson")

            -- 1. Проверяем токен и в заголовке, и в куках
            local token = nil

            -- Сначала проверяем Authorization header
            local auth_header = ngx.var.http_Authorization
            if auth_header then
                token = auth_header:match("Bearer (.+)")
            end

            -- Если нет в заголовке, проверяем куку
            if not token then
                token = ngx.var.cookie_access_token
            end

            -- Если токен так и не найден
            if not token then
                ngx.log(ngx.ERR, "No JWT token found in headers or cookies")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- 2. Валидация токена
            local public_key_file = "/etc/nginx/certs/jwt-public.pem"
            local f = io.open(public_key_file, "r")
            if not f then
                ngx.log(ngx.ERR, "Failed to open public key file: ", public_key_file)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            local public_key = f:read("*a")
            f:close()

            local jwt_obj = jwt:verify(public_key, token)
            if not jwt_obj.verified then
                ngx.log(ngx.ERR, "JWT verification failed: ", cjson.encode(jwt_obj.reason))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local user_id = jwt_obj.payload.sub
            if not user_id then
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            ngx.var.new_avatar_uri = "/avatars/" .. user_id .. ".webp"
            ngx.log(ngx.INFO, "Final MinIO request URI: ", ngx.var.new_avatar_uri)
        }

        set $new_avatar_uri "";

        proxy_pass http://minio:9000$new_avatar_uri;
        proxy_set_header Host minio:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-server-side-encryption;
        proxy_hide_header x-amz-server-side-encryption;
        proxy_hide_header Set-Cookie;
    }

    location /avatars/ {
        proxy_pass http://minio:9000/avatars/;
        proxy_set_header Host minio:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-server-side-encryption;
        proxy_hide_header x-amz-server-side-encryption;
        proxy_hide_header Set-Cookie;
    }

    location /pages/profile.html {
        access_by_lua_block {
            local jwt = require("resty.jwt")
            local cjson = require("cjson")

            local token = ngx.var.cookie_access_token or
                         (ngx.var.http_Authorization and ngx.var.http_Authorization:match("Bearer (.+)"))

            if not token then
                ngx.redirect("/pages/login.html")
                return
            end

            local public_key = io.open("/etc/nginx/certs/jwt-public.pem"):read("*a")
            local jwt_obj = jwt:verify(public_key, token)

            if not jwt_obj.verified then
                ngx.redirect("/pages/login.html")
                return
            end

            if jwt_obj.payload.is_admin then
                ngx.header.content_type = "text/html"
                ngx.say(io.open("/usr/share/nginx/html/pages/adminProfile.html"):read("*a"))
                ngx.exit(ngx.HTTP_OK)
            else
                ngx.header.content_type = "text/html"
                ngx.say(io.open("/usr/share/nginx/html/pages/profile.html"):read("*a"))
                ngx.exit(ngx.HTTP_OK)
            end
        }
    }

    location ~ /pages/(clients.html|client.html|resourceServer.html|resourceServers.html)$ {
        access_by_lua_block {
            local jwt = require("resty.jwt")
            local cjson = require("cjson")

            local token = ngx.var.cookie_access_token

            if not token then
                ngx.redirect("/pages/login.html")
                return
            end

            local public_key = io.open("/etc/nginx/certs/jwt-public.pem"):read("*a")
            local jwt_obj = jwt:verify(public_key, token)

            if not jwt_obj.verified then
                ngx.redirect("/pages/login.html")
                return
            end

            if not jwt_obj.payload.is_admin then
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }

        root /usr/share/nginx/html;
        try_files $uri =404;
    }

    location /pages/ {
        proxy_set_header Authorization "Bearer $cookie_access_token";
        root /usr/share/nginx/html;
        try_files $uri $uri/ =404;
    }

    location /icons/ {
        alias /usr/share/nginx/html/icons/;
        try_files $uri =404;
        types {
            image/svg+xml  svg;
        }
    }

    location / {
        proxy_pass http://backend;
        proxy_set_header Authorization "Bearer $cookie_access_token";
        proxy_set_header Host $host;
        proxy_pass_request_headers on;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}