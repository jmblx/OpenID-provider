server {
    listen 80;
    server_name menoitami.ru;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

proxy_cache_path /var/cache/nginx/user_avatars levels=1:2 \
                 keys_zone=user_avatars:10m \
                 inactive=30m max_size=1g;

server {
    listen 443 ssl;
    server_name menoitami.ru;

    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, X-CSRF-Token, X-Device-Fingerprint' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    if ($request_method = 'OPTIONS') {
        return 204;
    }

    ssl_certificate /etc/letsencrypt/live/menoitami.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/menoitami.ru/privkey.pem;

    include /etc/letsencrypt/options-ssl-nginx.conf;

    location ~ ^/user-avatars/jwt/ {
        access_by_lua_block {
            local jwt = require("resty.jwt")
            local cjson = require("cjson")

            local token = nil

            local auth_header = ngx.var.http_Authorization
            if auth_header then
                token = auth_header:match("Bearer (.+)")
            end

            if not token then
                token = ngx.var.cookie_access_token
            end

            if not token then
                ngx.log(ngx.ERR, "No JWT token found in headers or cookies")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local public_key_file = "/etc/nginx/certs/jwt-public.pem"
            local f = io.open(public_key_file, "r")
            if not f then
                ngx.log(ngx.ERR, "Failed to open public key file: ", public_key_file)
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            local public_key = f:read("*a")
            f:close()

            local jwt_obj = jwt:verify(public_key, token)
            if not jwt_obj.verified then
                ngx.log(ngx.ERR, "JWT verification failed: ", cjson.encode(jwt_obj.reason))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local user_id = jwt_obj.payload.sub
            if not user_id then
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            ngx.var.new_avatar_uri = "/user-avatars/" .. user_id .. ".webp"
            ngx.log(ngx.INFO, "Final MinIO request URI: ", ngx.var.new_avatar_uri)
        }

        proxy_cache              user_avatars;
        proxy_cache_key          $uri;
        proxy_cache_valid        200 15m;
        proxy_cache_use_stale    error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;

        add_header Cache-Control "public, max-age=900, must-revalidate";
        add_header X-Cache-Status $upstream_cache_status;

        proxy_pass http://minio:9000$new_avatar_uri;
        proxy_set_header Host minio:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-server-side-encryption;
        proxy_hide_header x-amz-server-side-encryption;
        proxy_hide_header Set-Cookie;
    }

    location ~ ^/(user-avatars|client-avatars)/ {
        rewrite ^/(user-avatars|client-avatars)/(.*)$ /$1/$2 break;
        proxy_pass http://minio:9000;
        proxy_set_header Host minio:9000;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-server-side-encryption;
        proxy_hide_header x-amz-server-side-encryption;
        proxy_hide_header Set-Cookie;

        proxy_buffering off;
        proxy_request_buffering off;
        chunked_transfer_encoding on;
    }

    location ~ /pages/(clients.html|client.html|resourceServer.html|resourceServers.html)$ {
        access_by_lua_block {
            local jwt = require("resty.jwt")
            local cjson = require("cjson")

            local token = ngx.var.cookie_access_token

            if not token then
                ngx.redirect("/pages/login.html")
                return
            end

            local public_key = io.open("/etc/nginx/certs/jwt-public.pem"):read("*a")
            local jwt_obj = jwt:verify(public_key, token)

            if not jwt_obj.verified then
                ngx.redirect("/pages/login.html")
                return
            end

            if not jwt_obj.payload.is_admin then
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }

        root /usr/share/nginx/html;
        try_files $uri =404;
    }

    location /pages/ {
        proxy_set_header Authorization "Bearer $cookie_access_token";
        root /usr/share/nginx/html;
        try_files $uri $uri/ =404;
    }

    location /icons/ {
        alias /usr/share/nginx/html/icons/;
        try_files $uri = 404;
        types {
            image/svg+xml  svg;
        }
    }

    location /scripts/ {
        alias /usr/share/nginx/html/scripts/;
        try_files $uri = 404;
        types {
            application/javascript js;
        }
    }

    location /styles/ {
        alias /usr/share/nginx/html/styles/;
        try_files $uri =404;
        default_type text/css;
#         expires 1y;
#         add_header Cache-Control "public";
    }
#     location /scripts/ {
#         alias /usr/share/nginx/html/scripts/;
#         try_files $uri =404;
#
#         # Явное указание MIME-типов (лучше чем блок types для одного типа)
#         add_header Content-Type application/javascript;
#
#         # Оптимизация производительности
#         expires 1y;
#         add_header Cache-Control "public, immutable";
#
#         # Безопасность
#         add_header X-Content-Type-Options "nosniff";
#     }

    location / {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        proxy_set_header Authorization "Bearer $cookie_access_token";

        proxy_redirect off;
        proxy_buffering off;

        proxy_connect_timeout 60s;
        proxy_read_timeout 60s;
        proxy_send_timeout 60s;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        rewrite ^(/[^/]+)$ $1/ break;
    }
}