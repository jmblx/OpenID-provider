
upstream backend {
    # имя сервиса в docker-compose, порт 8000
    server auth_service:8000;
}

server {
    listen 80;
    server_name localhost;

    # CORS
    add_header 'Access-Control-Allow-Origin' '$http_origin' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With, X-CSRF-Token, X-Device-Fingerprint' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    if ($request_method = 'OPTIONS') {
        return 204;
    }

    # JWT-запрос аватарки
    location ~ ^/user-avatars/jwt/ {
        access_by_lua_block {
            local jwt    = require("resty.jwt")
            local cjson  = require("cjson")

            local token = ngx.var.http_Authorization and ngx.var.http_Authorization:match("Bearer (.+)")
                       or ngx.var.cookie_access_token

            if not token then
                ngx.log(ngx.ERR, "No JWT token found")
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            local f = io.open("/etc/nginx/certs/jwt-public.pem","r")
            if not f then
                ngx.log(ngx.ERR, "Can't open public key")
                ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            end
            local pub = f:read("*a"); f:close()

            local v = jwt:verify(pub, token)
            if not v.verified then
                ngx.log(ngx.ERR, "JWT fail: ", cjson.encode(v.reason))
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            ngx.var.new_avatar_uri = "/user-avatars/" .. v.payload.sub .. ".webp"
        }
        set $new_avatar_uri "";
        proxy_pass http://minio:9000$new_avatar_uri;
        proxy_set_header Host            minio:9000;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header x-amz-*;
        proxy_buffering        off;
        proxy_request_buffering off;
        chunked_transfer_encoding on;
    }

    # Простая отдача bucket-ов
    location ~ ^/(user-avatars|client-avatars)/ {
        rewrite ^/(user-avatars|client-avatars)/(.*)$ /$1/$2 break;
        proxy_pass http://minio:9000;
        proxy_set_header Host            minio:9000;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_hide_header x-amz-*;
        proxy_buffering        off;
        proxy_request_buffering off;
        chunked_transfer_encoding on;
    }

    # Защищённые админ-страницы
    location ~ /pages/(clients\.html|client\.html|resourceServer\.html|resourceServers\.html)$ {
        access_by_lua_block {
            local jwt   = require("resty.jwt")
            local token = ngx.var.cookie_access_token
            if not token then return ngx.redirect("/pages/login.html") end

            local f = io.open("/etc/nginx/certs/jwt-public.pem","r")
            if not f then return ngx.redirect("/pages/login.html") end
            local pub = f:read("*a"); f:close()

            local v = jwt:verify(pub, token)
            if not v.verified then return ngx.redirect("/pages/login.html") end
            if not v.payload.is_admin then ngx.exit(ngx.HTTP_FORBIDDEN) end
        }
        root        /usr/share/nginx/html;
        try_files   $uri =404;
    }

    # Статика и SPA
    location /pages/ {
        proxy_set_header Authorization "Bearer $cookie_access_token";
        root      /usr/share/nginx/html;
        try_files $uri $uri/ =404;
    }
    location /icons/   { alias /usr/share/nginx/html/icons/;   try_files $uri =404; types { image/svg+xml svg; } }
    location /scripts/ { alias /usr/share/nginx/html/scripts/; try_files $uri =404; types { application/javascript js; } }
    location /styles/  { alias /usr/share/nginx/html/styles/;  try_files $uri =404; default_type text/css; }

    # Проксирование на backend
    location / {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";

        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;
        proxy_set_header Authorization "Bearer $cookie_access_token";

        proxy_redirect      off;
        proxy_buffering     off;
        proxy_connect_timeout 60s;
        proxy_read_timeout    60s;
        proxy_send_timeout    60s;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        rewrite ^(/[^/]+)$ $1/ break;
    }
}
