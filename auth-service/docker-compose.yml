x-logging:
  &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/loki/api/v1/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

services:
  db:
    image: postgres:17
    container_name: backend_service.db
    command: -p 5432
    expose:
      - 5432
    restart: always
    env_file:
      - .env-prod
    networks:
      - backend_service.db.network
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    container_name: redis_auth
    command: ["redis-server", "--port", "6379", "--save", "60", "1", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    expose:
      - 6379
    networks:
      - backend_service.redis.network
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  auth_service:
    container_name: backend_service.auth_service
    env_file:
      - .env-prod
#    build:
#      context: auth_service
#      dockerfile: Dockerfile
    image: backend_service.auth_service
    command: [ "sh", "/backend-service.auth_service/docker/serve.sh" ]
    expose:
      - 8000
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:8000/healthcheck" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
      - backend_service.db.network
      - backend_service.redis.network
      - backend_service.grafana.network
      - backend_service.nats.network
      - backend_service.minio.network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./certs:/backend-service.auth_service/certs
#    logging: *default-logging

  nats:
    image: nats
    ports:
      - "8222:8222"
      - "6222:6222"
      - "4222:4222"
    command: "--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222 --port 4222"
    networks:
      - backend_service.nats.network

  notification_app:
    env_file:
      - notification/.env-prod
      - .env-prod # для удобства в этом файле первостепенно в проде скорее всего лучше по 1 файлу указывать
    image: backend_service.notification_app
#    build:
#      context: notification/
    command: [ "sh", "/notification_app/docker/app.sh" ]
    networks:
      - backend_service.nats.network
    depends_on:
      - nats

  db_migration:
    profiles: [ "setup", "migration" ]
    container_name: backend_service.db_migration
    image: backend_service.auth_service
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_service.db.network
    env_file:
      - .env-prod
    command: [ "sh", "/backend-service.auth_service/docker/migrate.sh" ]

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minio-key
      MINIO_ROOT_PASSWORD: 17471747
      MINIO_SERVER_URL: http://minio.example.com:9000
    volumes:
      - ./minio-data:/data
      - ./minio-config:/root/.minio
    command: server /data --console-address ":9001"
    restart: always
    networks:
      - backend_service.minio.network
    extra_hosts:
      - "minio.example.com:127.0.0.1"

  mc:
    profiles: [ "setup" ]
    image: minio/mc
    depends_on:
      - minio
    environment:
      - MINIO_ALIAS=myminio
      - MINIO_URL=http://minio:9000
      - MINIO_ACCESS_KEY=minio-key
      - MINIO_SECRET_KEY=17471747
      - BUCKET_NAME=avatars
#     mc policy set private $${MINIO_ALIAS}/$${BUCKET_NAME}
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      mc alias set $${MINIO_ALIAS} $${MINIO_URL} $${MINIO_ACCESS_KEY} $${MINIO_SECRET_KEY};
      mc mb $${MINIO_ALIAS}/$${BUCKET_NAME} || true;
      mc policy set public $${MINIO_ALIAS}/$${BUCKET_NAME}
      "
    networks:
      - backend_service.minio.network

  nginx:
    image: custom-openresty-jwt
    container_name: nginx_app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./app/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./nginx-logs:/var/log/nginx
      - ./certbot/www:/var/www/certbot:rw
      - ./static:/usr/share/nginx/html
      - ./certs:/etc/nginx/certs
    depends_on:
      - auth_service
      - db
      - redis
#      - certbot
    networks:
      - backend_service.db.network
      - backend_service.minio.network
    extra_hosts:
      - "minio.example.com:127.0.0.1"

  grafana:
    profiles: [ "grafana" ]
    image: grafana/grafana:9.5.2
    container_name: backend_service.grafana
    hostname: backend_service.grafana
    restart: unless-stopped
    expose:
      - "3000"
    ports:
      - "127.0.0.1:3000:3000"
    networks:
      - backend_service.grafana.network
    volumes:
      - backend_service.grafana.data:/var/lib/grafana:rw
      - ./grafana/provisioning:/etc/grafana/provisioning:rw
      - ./grafana/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - VIRTUAL_HOST=backend_service.grafana
      - NETWORK_ACCESS=internal
      - VIRTUAL_PORT=3000
    logging: *default-logging

  loki:
    profiles: [ "grafana" ]
    image: grafana/loki:2.7.3
    container_name: backend_service.loki
    hostname: backend_service.loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/config.yaml:/etc/loki/config.yaml:ro
      - backend_service.loki.data:/tmp/:rw
    command: -config.file=/etc/loki/config.yaml
    restart: unless-stopped
    networks:
      - backend_service.grafana.network
    logging: *default-logging

#  vector:
#    profiles: [ "grafana" ]
#    image: timberio/vector:0.29.1-alpine
#    container_name: backend_service.vector
#    hostname: backend_service.vector
#    restart: unless-stopped
#    expose:
#      - "8383"
#    networks:
#      - backend_service.grafana.network
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./vector/vector.toml:/etc/vector/vector.toml:ro
#    logging:
#      driver: "json-file"
#      options:
#        max-size: "10m"

  prometheus:
    profiles: [ "grafana" ]
    image: prom/prometheus:v2.43.0
    container_name: backend_service.prometheus
    hostname: backend_service.prometheus
    ports:
      - "9090:9090"
    networks:
      - backend_service.grafana.network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    profiles: [ "grafana" ]
    image: grafana/tempo:2.0.1
    container_name: backend_service.tempo
    hostname: backend_service.tempo
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
    networks:
      - backend_service.grafana.network
    depends_on:
      - loki
    logging: *default-logging

  #  certbot:
#    image: certbot/certbot:latest
#    container_name: certbot
#    volumes:
#      - ./certbot/www:/var/www/certbot:rw
#      - ./certbot/conf:/etc/letsencrypt:rw
#    entrypoint: /bin/sh -c 'trap exit TERM; while :; do sleep 6h & wait $!; done'
#    networks:
#      - custom

#  investments_service:
#    env_file:
#      - investments_src/.env-prod
#    build:
#      context: ./investments_src
#      dockerfile: Dockerfile
#    container_name: investments_service
#    networks:
#      - custom
#    command: ["/bin/sh", "-c", "while true; do make collect-data; sleep 3600; done"]

networks:
  backend_service.db.network:
      driver: bridge
  backend_service.minio.network: {}
  backend_service.redis.network: {}
  backend_service.grafana.network: {}
  backend_service.nats.network: {}

volumes:
  db-data:
  redis-data:
  backend_service.grafana.data: {}
  backend_service.loki.data: {}
