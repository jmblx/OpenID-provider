name: Deploy to Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Extract commit SHA
        id: vars
        run: echo "TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push API Service
        run: |
          cd ./auth-service/auth_service
          docker build -t menoitami/backend_service.api:${TAG} .
          docker push menoitami/backend_service.api:${TAG}

      - name: Build and Push Notification Service
        run: |
          cd ./auth-service/notification
          docker build -t menoitami/backend_service.notification_app:${TAG} .
          docker push menoitami/backend_service.notification_app:${TAG}

      - name: Save tag for deploy step
        run: echo "${TAG}" > tag.txt

      - name: Upload tag artifact
        uses: actions/upload-artifact@v3
        with:
          name: image-tag
          path: tag.txt

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download tag artifact
        uses: actions/download-artifact@v3
        with:
          name: image-tag

      - name: Read tag
        id: read_tag
        run: echo "TAG=$(cat tag.txt)" >> $GITHUB_ENV

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.USER_NAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd OpenID-provider/auth-service/
            git pull origin main
            echo "TAG=${TAG}" > .env
            docker compose down
            docker compose pull
            docker compose build --no-cache
            docker compose up -d --force-recreate
            docker image prune -af
